<style>
      body {
        background-color: #f2f0e4;
        color: #00667F;
      }
      #data_description { text-align: center; }
      .data { color: #e87642; }
      #timeSeriesForm { text-align: center; }
      #dataRecieved {
      	padding-left: 25%;
      	padding-right: 25%;
      }
      #center_divs {
      	display: table;
      	width: 100%;
      }
      #center_divs > div {
      	text-align: center;
      	display: table-cell;
      	padding: 1em;
      	width: 50%;
      }
      #submit {
      	text-align: center;
      	margin-bottom: 50px;
      }
 </style>

<body>

<nav class = "navbar navbar-default" role = "navigation">
   
   <div class = "navbar-header">
      <button type = "button" class = "navbar-toggle" 
         data-toggle = "collapse" data-target = "#example-navbar-collapse">
         <span class = "sr-only">Toggle navigation</span>
         <span class = "icon-bar"></span>
         <span class = "icon-bar"></span>
         <span class = "icon-bar"></span>
      </button>	
      <a class = "navbar-brand" href = "#">Data Tracker</a>
   </div>
   
   <div class = "collapse navbar-collapse" id = "example-navbar-collapse">
      <ul class = "nav navbar-nav">
      	<li>
      		<a href="/importer">
			<% link_to "Importer", '/importer' %>
			Importer
		</a>
      	</li>
         <li class="active"><a href = "/graph">Grapher</a></li>	
      </ul>
   </div>
   
</nav>

<div class="container" style="margin-top: 100px;">
      <div class="row">
        <div class="col-lg-12 text-center">
          <h1 class="mt-5">Financial Data Tracker</h1>
          <p class="lead" style="color: #e87642; font-size: 48px; ">Exante Data</p>
        </div>
      </div>
</div>

<h1 style="text-align: center; font-size: 48px; margin-bottom: 50px;">Grapher</h1>

<img src="/graph.png" class="img-responsive" alt="Cinque Terre">

<div id="container" style="width:100%; height:400px; padding-top: 40px;"></div>
<div id="container1" style="width:100%; height:400px; padding-top: 40px;"></div>

<div id="" style="display: inline-block; margin-left: 33%">
	<h2 style="text-align: center; padding-bottom: 30px; float: left;">Rolling Regression Value:</h2>
	<h2 style="text-align: center; color: #e87642; float: left; padding-left: 10px;"><p><%= @months %> Months</p></h2>
	<br>
</div>


<br>
<h1 style="text-align: center; padding-bottom: 30px;">Current Raw Data Recieved</h1>

	<div style="text-align: center; margin-bottom: 100px;">
			<button id="data-button" class='btn btn-primary-lrg'>Toggle Raw Data Recieved View</button>
	</div>

<div id="dataRecieved">
	<h3>Data Received</h3>
	<b>Category 1:</b><br> <p class="data"><%= @category1 %></p><br>
	<b>Category 2:</b><br> <p class="data"><%= @category2 %></p><br>
	<b>Start date:</b><br> <p class="data"><%= @chosen_start_date %></p><br>
	<b>End date:</b><br> <p class="data"><%= @chosen_end_date %></p><br>
	<b>Category 1 Data:</b><br> <p class="data"><%= @category1_data %></p><br>
	<b>Category 2 Data:</b><br> <p class="data"><%= @category2_data %></p><br>
	<b>Dates:</b><br> <p class="data"><%= @dates %></p><br><br>

	<br>
</div>
<div id="timeSeriesForm">
<h3 style="font-size: 26px;">Enter Time Series and Financial Element Category</h3>

		<br><br>
</div>
<div id="center_divs">

<div>
	<%= form_tag graph_path, method: :get do %>
		Category 1: 
		<br><br>
		<% @categories.each do |category| %>
			<%= radio_button_tag(:category1, category, required: 'required') %>
			<%= label_tag(:category1, category) %>
			<br>
		<% end %>

		<br><br>
</div>

<div>	
		Category 2:
		<br><br>
		<% @categories.each do |category| %>
			<%= radio_button_tag(:category2, category, required: 'required') %>
			<%= label_tag(:category2, category) %>
			<br>
		<% end %>

		<br><br>
</div>
</div>
	<div id="submit">
		<%= text_field_tag :daterange, "", name: 'daterange', size: 24 %>
		<%= number_field_tag :months, 12, name: 'month' %>
		<%= submit_tag "Redefine search" %>
	</div>

	<% end %>

</body>

<script type="text/javascript">

	$('#dataRecieved').hide();
	$('#data-button').on('click', function() { $('#dataRecieved').toggle(); })


	function linearRegression(arr1, arr2) {
		// console.log("LINEAR EQUATION FUNCTION CALLED");
		var arr1_size = arr1.length;
		var arr2_size = arr2.length;
		if (arr1_size != arr2_size) {
			alert("Error...exiting");
		}
		var x_sum = sumOfArray(arr1);
		var y_sum = sumOfArray(arr2);
		// console.log("x sum -> " + x_sum);
		// console.log("y sum -> " + y_sum);
		var xx_sum = 0;
		var xy_sum = 0;
		var yy_sum = 0;

		for (var i = 0; i < arr1.length; i++) {
			xx_sum += (arr1[i] * arr1[i]);
			xy_sum += (arr1[i] * arr2[i]);
			yy_sum += (arr2[i] * arr2[i]);
		}
		// console.log("xx -> " + xx_sum + " xy-> " + xy_sum + " yy-> " + yy_sum);

		var slope_m = ((arr1_size * xy_sum) - (x_sum * y_sum)) / ((arr1_size * xx_sum) - (x_sum * x_sum));
		var intercept_b = (y_sum - (slope_m * x_sum)) / arr1_size;

		var r = (xy_sum - ((1/arr1_size) * x_sum * y_sum)) / (Math.sqrt(((xx_sum) - ((1/arr1_size) * (Math.pow(x_sum, 2)))) * ((yy_sum) - ((1/arr1_size) * (Math.pow(y_sum, 2))))));

		var rSquared = r * r;
		var equationArray = [slope_m, intercept_b, r, rSquared];

		// console.log(equationArray);
		return equationArray;
	}

	function calculateRollingRegression(array1, array2, months) {
		var rsquared = 0;
		var rsquaredArray = [];	
		var betaArray = [];	
		var tempArray1 = [];
		var tempArray2 = [];
		var startIndex = 1;
		var twelve = months;
		var endIndex = startIndex+months;	//changed
		var eqnLine = [];
		//populate rsquaredArray with 12 months of zeroes
		for (var r = 0; r < months; r++) {	//changed
			betaArray.push(0);
			rsquaredArray.push(0);
		}
		// for (var rsq = 0; rsq < months; rsq++) { //changed
		// 	rsquaredArray.push(0);
		// }
		// console.log("rsquaredArray: " + rsquaredArray);

		//we do the following 12 times to obtain the first equation
		for (var i = 1; i < months; i++) { //changed
			tempArray1[i] = (array1[i] - array1[i-1]) / array1[i];
			tempArray2[i] = (array2[i] - array2[i-1]) / array2[i];
		}

		equationLine = linearRegression(tempArray1, tempArray2);
		rsquared = equationLine[3];	//this should have rsquared
		betaValue = equationLine[0];	//this should be the slope_m...
		rsquaredArray.push(rsquared);
		betaArray.push(betaValue);
		// console.log("final INITIAL value of rsquaredArray: " + rsquaredArray);
		tempArray1 = [];	//restart this shit
		tempArray2 = [];

		//finally we iterate through the entire thing in stages of 12 currently
		for (var j = months; j < array1.length; j++) {	//changed
			var tempIndex = 0;
			console.log("startindex -> " + startIndex + " endIndex -> " + endIndex);

			for (startIndex; startIndex < endIndex; startIndex++) {
				tempArray1[tempIndex] = (array1[startIndex] - array1[startIndex-1]) / array1[startIndex];
				tempArray2[tempIndex] = (array2[startIndex] - array2[startIndex-1]) / array2[startIndex];
				if (tempIndex < months-1) {
					tempIndex++;
				}
				// tempIndex++;
			}	// at this piont, tempArray should be populated
			// console.log("Size of TempArray 1 and 2 -> " + tempArray1.length + " , " + tempArray2.length);
			// console.log("value: " + tempArray1);
			// console.log("startIndex after for loop -> " + startIndex);
			startIndex = startIndex - (months-1);
			// console.log("startIndex after decrement and ready for next -> " + startIndex);
			endIndex++;
			equationLine = linearRegression(tempArray1, tempArray2);
			rsquared = equationLine[3];
			betaValue = equationLine[0];
			rsquaredArray.push(rsquared);	//now we add the other rsquared
			betaArray.push(betaValue);
			// console.log("RSQUARED PUSHED INTO RSQUARED ARRAY -> " + rsquared);
			// console.log(rsquaredArray);
		}
		// console.log("Outside of the for loops...check answers");
		// console.log("rSquaredArray values -------> *****");
		console.log("RSQUAREDARRAY: ");
		console.log(rsquaredArray);
		console.log("BETA VALUE: ");
		console.log(betaArray);
		return {
			rSquaredArray: rsquaredArray,
			betaArray: betaArray
		};
	}

	function sumOfArray(arr) {
		var sum = 0;
		for (var i = 0; i < arr.length; i++) {
			sum += arr[i];
		}
		// console.log("inside of the SumOfArray function....value of sum is -> " + sum);
		return sum;
	}



	$(function () { 

		$('input[name="daterange"]').daterangepicker({
			"startDate": <%= @start_date.strftime('%m/%d/%Y') %>,
			"endDate": <%= @end_date.strftime('%m/%d/%Y') %>
		})

		//category1, category2 and dates array populated
		var array1 = <%= @category1_data.inspect.html_safe %>;
		var array2 = <%= @category2_data.inspect.html_safe %>;
		var dates = <%= @timestamps.inspect.html_safe %>;
		var months = <%= @months.inspect.html_safe %>
		var months = parseInt(months);

		var anotherLine = [];
		var regression_array = [];
		var beta_array = [];
		var anotherLine = calculateRollingRegression(array1, array2, months);
		var regress = [];
		var betas = [];

		//populate the regress and betas temporary arrays
		var regress = anotherLine.rSquaredArray;
		var betas = anotherLine.betaArray;



		for (var r = 0; r < regress.length; r++) {
			regression_array.push([dates[r], regress[r]]);
		}

		for (var more = 0; more < betas.length; more++) {
			beta_array.push([dates[more], betas[more]]);
		}

		var myChart1 = Highcharts.chart('container1', {
	        chart: {
	            type: 'line',
	            zoomType: 'xy'
	        },
	        rangeSelector: {
	        	enabled: true
	        },
	        title: {
	            text: 'R Squared and Beta Values'
	        },
	        xAxis: {
	            text: 'Time Series',
	            type: 'category'
	        },
	        series: [{
                name: 'Regression Value',
                data: regression_array
    
            }
            , {
            	name: 'Beta Value',
            	data: beta_array
            }
            ]
	    });

	    var myChart = Highcharts.chart('container', {
	        chart: {
	            type: 'line',
	            zoomType: 'xy'
	        },
	        rangeSelector: {
	        	enabled: true
	        },
	        title: {
	            text: 'All Time Series'
	        },
	        xAxis: {
	            text: 'Time Series'
	        },
	        data: {
				googleSpreadsheetKey: '1eQ-bJShsH4iGgFWWk8rtgEYeqMnP3K-PsyyWDcmMZGs'
			}
	    });

});
// console.log("Regression array");
// console.log(regression_array);
// console.log("Betas array");
// console.log(beta_array);

// console.log("regress: ");
// console.log(regress);
// console.log("betas: ");
// console.log(betas);
// console.log("MONTHS -> ");
// console.log(months);
// console.log("months + 3 should equal 15 -> " + (months+3));
// console.log("MONTHS TYPEOF -> ");
// console.log(typeof months);



</script>



